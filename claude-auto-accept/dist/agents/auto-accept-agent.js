"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoAcceptAgent = void 0;
const config_manager_1 = require("../config/config-manager");
const logger_1 = require("../utils/logger");
const security_checker_1 = require("../utils/security-checker");
const uuid_1 = require("uuid");
class AutoAcceptAgent {
    constructor() {
        this.config = config_manager_1.ConfigManager.getInstance().getConfig();
        this.logger = logger_1.Logger.getInstance();
        this.securityChecker = new security_checker_1.SecurityChecker(this.config);
        this.session = this.createSession();
        this.logger.info('Auto-Accept Agent initialized', {
            enabled: this.config.enabled,
            sessionId: this.session.id
        });
    }
    createSession() {
        return {
            id: (0, uuid_1.v4)(),
            startTime: new Date(),
            acceptCount: 0,
            enabled: this.config.enabled,
            lastActivity: new Date()
        };
    }
    async processConfirmationRequest(request) {
        this.session.lastActivity = new Date();
        this.logger.info('Processing confirmation request', {
            requestId: request.id,
            operation: request.operation,
            message: request.message.substring(0, 100) + '...'
        });
        // Check if auto-accept is enabled
        if (!this.config.enabled || !this.session.enabled) {
            return this.createResponse(request, false, 'Auto-accept disabled');
        }
        // Check session limits
        if (this.isSessionExpired() || this.hasExceededLimits()) {
            return this.createResponse(request, false, 'Session limits exceeded');
        }
        // Perform security assessment
        const assessment = this.securityChecker.assessRisk(request);
        let decision;
        let reason;
        // ALWAYS ACCEPT when auto-accept is enabled
        // This ensures all confirmations are automatically approved
        decision = true;
        reason = `Auto-accepted: ${assessment.reason}`;
        this.session.acceptCount++;
        const response = this.createResponse(request, decision, reason);
        // Log the decision
        await this.auditDecision(request, response, assessment);
        return response;
    }
    createResponse(request, accepted, reason) {
        return {
            id: (0, uuid_1.v4)(),
            accepted,
            reason,
            timestamp: new Date(),
            autoGenerated: true
        };
    }
    async auditDecision(request, response, assessment) {
        const auditEntry = {
            timestamp: new Date(),
            sessionId: this.session.id,
            requestId: request.id,
            operation: request.operation,
            message: request.message,
            decision: response.accepted ? 'accept' : 'reject',
            reason: response.reason,
            riskLevel: assessment.riskLevel,
            userOverride: false
        };
        this.logger.audit(auditEntry);
    }
    isSessionExpired() {
        const now = new Date();
        const sessionAge = now.getTime() - this.session.startTime.getTime();
        const timeoutMs = this.config.sessionTimeout * 60 * 1000;
        return sessionAge > timeoutMs;
    }
    hasExceededLimits() {
        return this.session.acceptCount >= this.config.maxAutoAccepts;
    }
    getSessionStatus() {
        const now = new Date();
        const sessionAge = now.getTime() - this.session.startTime.getTime();
        const timeoutMs = this.config.sessionTimeout * 60 * 1000;
        const timeRemaining = Math.max(0, timeoutMs - sessionAge);
        return {
            active: this.config.enabled && this.session.enabled && !this.isSessionExpired(),
            acceptCount: this.session.acceptCount,
            remainingAccepts: Math.max(0, this.config.maxAutoAccepts - this.session.acceptCount),
            timeRemaining: Math.floor(timeRemaining / 1000), // seconds
            sessionId: this.session.id
        };
    }
    enableAutoAccept() {
        this.config.enabled = true;
        this.session.enabled = true;
        this.session = this.createSession(); // Reset session
        config_manager_1.ConfigManager.getInstance().setEnabled(true);
        this.logger.info('Auto-accept enabled', { sessionId: this.session.id });
    }
    disableAutoAccept() {
        this.config.enabled = false;
        this.session.enabled = false;
        config_manager_1.ConfigManager.getInstance().setEnabled(false);
        this.logger.info('Auto-accept disabled', { sessionId: this.session.id });
    }
    resetSession() {
        this.session = this.createSession();
        this.logger.info('Session reset', { sessionId: this.session.id });
    }
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        this.securityChecker.updateConfig(this.config);
        config_manager_1.ConfigManager.getInstance().updateConfig(newConfig);
        this.logger.info('Configuration updated');
    }
    getContext() {
        return {
            config: this.config,
            session: this.session,
            logger: this.logger
        };
    }
    async testOperation(operation, message) {
        const testRequest = {
            id: 'test-' + (0, uuid_1.v4)(),
            message,
            operation,
            timestamp: new Date(),
            riskLevel: 'medium'
        };
        const assessment = this.securityChecker.assessRisk(testRequest);
        return {
            wouldAccept: assessment.decision === 'allow' && this.config.enabled,
            reason: assessment.reason,
            riskLevel: assessment.riskLevel
        };
    }
}
exports.AutoAcceptAgent = AutoAcceptAgent;
//# sourceMappingURL=auto-accept-agent.js.map